name: Create version

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  create_version:
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'pr release' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the version number in the PR description
        id: get_version
        run: |
          # Extract the version number from the PR description
          version=$(echo "${{ github.event.pull_request.body }}" | grep -oP '## Version \K[0-9]+\.[0-9]+\.[0-9]+')
          echo "NEW_VERSION=${version}" >> $GITHUB_OUTPUT

      - name: Gather all changes
        run: |

          VERSION_TEXT="## [Version ${{ steps.get_version.outputs.NEW_VERSION }}]\n"

          # Define the order of sections
          sections_order=("breaking" "added" "changed" "fixed" "removed")

          # Process each section in the specified order
          for section in "${sections_order[@]}"; do
            dir_path=".changes/${section}"
            if [ -d "$dir_path" ]; then
              # Collect .md files sorted numerically using version sort
              files=()
              while IFS= read -r -d $'\0' file; do
                files+=("$file")
              done < <(find "$dir_path" -maxdepth 1 -type f -name '*.md' -print0 | sort -V -z)
              
              if [ ${#files[@]} -gt 0 ]; then
                # Capitalize the first letter of the section name
                section_name="$(tr '[:lower:]' '[:upper:]' <<< "${section:0:1}")${section:1}"
                VERSION_TEXT+="### $section_name"
                for file in "${files[@]}"; do
                  filename=$(basename "$file" .md)
                  content=$(cat "$file")
                  VERSION_TEXT+="- [${filename}](https://github.com/OltaLabs/no-conflict-keep-a-changelog-action/pull/${filename}): ${content}"
                done
              fi
            fi
          done
          echo "VERSION_TEXT=${VERSION_TEXT}" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.update({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.get_version.outputs.VERSION_TEXT }}'
            })
